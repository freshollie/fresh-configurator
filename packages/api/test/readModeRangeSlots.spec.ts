import mockMsp from "./mockMsp";
import { readModeRangeSlots } from "../src";
import codes from "../src/codes";

describe("readModeRangeSlots", () => {
  it("should return the mode range slots without extra information for v1.40.0", async () => {
    mockMsp.setApiVersion("1.40.0");
    mockMsp.setResponse([
      0,
      3,
      16,
      32,
      0,
      3,
      16,
      34,
      0,
      5,
      2,
      18,
      0,
      0,
      16,
      32,
      0,
      0,
      16,
      32,
      0,
      0,
      16,
      32,
      0,
      0,
      16,
      32,
      0,
      0,
      16,
      32,
      0,
      0,
      16,
      32,
      0,
      0,
      16,
      32,
      1,
      0,
      16,
      32,
      1,
      0,
      16,
      32,
      1,
      255,
      16,
      32,
      1,
      255,
      16,
      32,
      1,
      255,
      16,
      32,
      2,
      0,
      16,
      32,
      2,
      255,
      16,
      32,
      2,
      255,
      16,
      32,
      2,
      255,
      16,
      32,
      6,
      0,
      16,
      32,
    ]);

    expect(await readModeRangeSlots("/dev/someport")).toEqual([
      { modeId: 0, auxChannel: 3, range: { start: 1300, end: 1700 } },
      { modeId: 0, auxChannel: 3, range: { start: 1300, end: 1750 } },
      { modeId: 0, auxChannel: 5, range: { start: 950, end: 1350 } },
      { modeId: 0, auxChannel: 0, range: { start: 1300, end: 1700 } },
      { modeId: 0, auxChannel: 0, range: { start: 1300, end: 1700 } },
      { modeId: 0, auxChannel: 0, range: { start: 1300, end: 1700 } },
      { modeId: 0, auxChannel: 0, range: { start: 1300, end: 1700 } },
      { modeId: 0, auxChannel: 0, range: { start: 1300, end: 1700 } },
      { modeId: 0, auxChannel: 0, range: { start: 1300, end: 1700 } },
      { modeId: 0, auxChannel: 0, range: { start: 1300, end: 1700 } },
      { modeId: 1, auxChannel: 0, range: { start: 1300, end: 1700 } },
      { modeId: 1, auxChannel: 0, range: { start: 1300, end: 1700 } },
      { modeId: 1, auxChannel: 255, range: { start: 1300, end: 1700 } },
      { modeId: 1, auxChannel: 255, range: { start: 1300, end: 1700 } },
      { modeId: 1, auxChannel: 255, range: { start: 1300, end: 1700 } },
      { modeId: 2, auxChannel: 0, range: { start: 1300, end: 1700 } },
      { modeId: 2, auxChannel: 255, range: { start: 1300, end: 1700 } },
      { modeId: 2, auxChannel: 255, range: { start: 1300, end: 1700 } },
      { modeId: 2, auxChannel: 255, range: { start: 1300, end: 1700 } },
      { modeId: 6, auxChannel: 0, range: { start: 1300, end: 1700 } },
    ]);

    expect(mockMsp.execute).toHaveBeenCalledWith("/dev/someport", {
      code: codes.MSP_MODE_RANGES,
    });
  });

  it("should handle reading extra information for v1.41.0+ devices", async () => {
    mockMsp.setApiVersion("1.41.0");
    mockMsp.setResponseForCode(
      [
        0,
        3,
        16,
        32,
        0,
        3,
        16,
        34,
        0,
        5,
        2,
        18,
        0,
        0,
        16,
        32,
        0,
        0,
        16,
        32,
        0,
        0,
        16,
        32,
        0,
        0,
        16,
        32,
        0,
        0,
        16,
        32,
        0,
        0,
        16,
        32,
        0,
        0,
        16,
        32,
        1,
        0,
        16,
        32,
        1,
        0,
        16,
        32,
        1,
        255,
        16,
        32,
        1,
        255,
        16,
        32,
        1,
        255,
        16,
        32,
        2,
        0,
        16,
        32,
        2,
        255,
        16,
        32,
        2,
        255,
        16,
        32,
        2,
        255,
        16,
        32,
        6,
        0,
        16,
        32,
      ],
      codes.MSP_MODE_RANGES
    );

    mockMsp.setResponseForCode(
      [
        0,
        1,
        1,
        0,
        1,
        1,
        0,
        1,
        1,
        0,
        1,
        0,
        0,
        1,
        1,
        0,
        1,
        1,
        0,
        1,
        1,
        0,
        1,
        1,
        0,
        1,
        1,
        0,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        2,
        1,
        1,
        2,
        1,
        1,
        2,
        1,
        2,
        2,
        1,
        1,
        6,
        1,
        1,
      ],
      codes.MSP_MODE_RANGES_EXTRA
    );

    expect(await readModeRangeSlots("/dev/someport")).toEqual([
      {
        modeId: 0,
        auxChannel: 3,
        range: { start: 1300, end: 1700 },
        linkedTo: 1,
        modeLogic: 1,
      },
      {
        modeId: 0,
        auxChannel: 3,
        range: { start: 1300, end: 1750 },
        linkedTo: 1,
        modeLogic: 1,
      },
      {
        modeId: 0,
        auxChannel: 5,
        range: { start: 950, end: 1350 },
        linkedTo: 1,
        modeLogic: 1,
      },
      {
        modeId: 0,
        auxChannel: 0,
        range: { start: 1300, end: 1700 },
        linkedTo: 0,
        modeLogic: 1,
      },
      {
        modeId: 0,
        auxChannel: 0,
        range: { start: 1300, end: 1700 },
        linkedTo: 1,
        modeLogic: 1,
      },
      {
        modeId: 0,
        auxChannel: 0,
        range: { start: 1300, end: 1700 },
        linkedTo: 1,
        modeLogic: 1,
      },
      {
        modeId: 0,
        auxChannel: 0,
        range: { start: 1300, end: 1700 },
        linkedTo: 1,
        modeLogic: 1,
      },
      {
        modeId: 0,
        auxChannel: 0,
        range: { start: 1300, end: 1700 },
        linkedTo: 1,
        modeLogic: 1,
      },
      {
        modeId: 0,
        auxChannel: 0,
        range: { start: 1300, end: 1700 },
        linkedTo: 1,
        modeLogic: 1,
      },
      {
        modeId: 0,
        auxChannel: 0,
        range: { start: 1300, end: 1700 },
        linkedTo: 1,
        modeLogic: 1,
      },
      {
        modeId: 1,
        auxChannel: 0,
        range: { start: 1300, end: 1700 },
        linkedTo: 1,
        modeLogic: 1,
      },
      {
        modeId: 1,
        auxChannel: 0,
        range: { start: 1300, end: 1700 },
        linkedTo: 1,
        modeLogic: 1,
      },
      {
        modeId: 1,
        auxChannel: 255,
        range: { start: 1300, end: 1700 },
        linkedTo: 1,
        modeLogic: 1,
      },
      {
        modeId: 1,
        auxChannel: 255,
        range: { start: 1300, end: 1700 },
        linkedTo: 1,
        modeLogic: 1,
      },
      {
        modeId: 1,
        auxChannel: 255,
        range: { start: 1300, end: 1700 },
        linkedTo: 1,
        modeLogic: 1,
      },
      {
        modeId: 2,
        auxChannel: 0,
        range: { start: 1300, end: 1700 },
        linkedTo: 1,
        modeLogic: 1,
      },
      {
        modeId: 2,
        auxChannel: 255,
        range: { start: 1300, end: 1700 },
        linkedTo: 1,
        modeLogic: 1,
      },
      {
        modeId: 2,
        auxChannel: 255,
        range: { start: 1300, end: 1700 },
        linkedTo: 2,
        modeLogic: 1,
      },
      {
        modeId: 2,
        auxChannel: 255,
        range: { start: 1300, end: 1700 },
        linkedTo: 1,
        modeLogic: 1,
      },
      {
        modeId: 6,
        auxChannel: 0,
        range: { start: 1300, end: 1700 },
        linkedTo: 1,
        modeLogic: 1,
      },
    ]);

    expect(mockMsp.execute).toHaveBeenCalledWith("/dev/someport", {
      code: codes.MSP_MODE_RANGES,
    });
    expect(mockMsp.execute).toHaveBeenCalledWith("/dev/someport", {
      code: codes.MSP_MODE_RANGES_EXTRA,
    });
  });
});
